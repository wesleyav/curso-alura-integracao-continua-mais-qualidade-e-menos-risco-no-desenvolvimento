"Integração contínua (CI) é uma prática de desenvolvimento que requer que os desenvolvedores integrem o código em um repositório compartilhado várias vezes ao dia."

#################################################

Sistema de controle de versão

- ferramenta não importa
- comita tudo necessário para construção do projeto
	- código
	- scripts
	- migrações, schemas
	- IDE configs
	- não comita o que pode ser contruído (gem, jar, image, modules)
	- clone e começar (deve ser fácil)

#################################################

Organização dos repositórios

- cada projeto em seu repositório (Multi-repo)
- cada projeto no mesmo repositório (Mono-repo)

#################################################

- Integração Contínua (CI) significa integrar as alterações no mainline (master ou trunk) diariamente

- Para usar Integração Contínua, é necessário usar um sistema de controle de versão (VCS), e no final integramos o código no repositório (usar Git não é obrigatório)

- Aplicando Integração Contínua corretamente, diminuímos os problemas de integração (como merge hell), melhoramos a comunicação entre desenvolvedores e antecipamos a descoberta de bugs

- Os estilos de organização de projeto
	- Mono-repo possui todos os projetos em um único repositório
	- Multi-repo separa um repositório para cada projeto

#################################################

Ramificações

trunk based development
git flow
github flow
one flow
feature branch flow
pull request flow
gitlab flow

"Everyone commits To the Mainline every day." - Martin Fowler

- A regra da integração continua é antecipar os problemas. A princípio, o branch pode ser um perigo, um ampliador de risco. Existem alguams regras que podemo minimizar esse risco:

- commits simples e releaseble, orientados à uma tarefa

- branches de vida curta, margens mais simples

- estratégia combinada pela equipe

#################################################

Alguns branching models famosos são:

- Temporários (branches locais) São branches localizados apenas na máquina local e deverão se extiguir, são utilizados para organizar fluxos de trabalho e depois realizar o commit.

- Feature Branches São utilizados para implementar funcionalidades ou orientar tarefas.

- Historical Branches (mastaer e develop) As alterações ficam organizadas em commits baseados na cronologia no caso de um projeto de software.

- Environment Branches (Staging e Production)] Existem branches que são baseados no ambiente, isto é, em que espaço é realizado o deploy.

- Maintenance Branches (Release e Hotfix) Temos, ainda, os branches de manutenção do sistema.


- trunk based development -> https://trunkbaseddevelopment.com/

Complexidade (1 - fácil, 5 - difícil)
1 - trunk based development
2 - feature branch
3 - github flow
4 - gitlab flow
5 - git flow

#################################################

Como evitar branches de vida longa?

Feature Flags e Branch by Abastraction

- Feature flags: Suponhamos uma nova funcionalidade em nosso projeto que terá um tempo longo de implementação. Contudo, não queremos criar uma nova ramificação para esse processo, queremos trabalhar diretamente com o master ainda que o código não esteja completo.

Anteriormente, comentamos que cada commit deve ser releaseble, isto é, pode ser publicado. Existe uma maneira de trabalhar sem branches: a feature flag.

O código é inserido no master, mas ele não é visível para a equipe. O Feature flag server também para testar funcionalidades, por exemplo.

- Branch by Abastraction: apesar do nome, não envolve a criação de uma nova ramificação. Temos um módulo ligado, uma parte da aplicação utiliza uma biblioteca antiga e precisa ser substituída. Esse é um processo lento, e muitos elementos precisam ser alterados.

O primeiro passo é introduzir uma abstração no código principal, isto é, uma camada intermediária para isolar o código que utiliza o módulo, portanto todas as chamadas deverão passar pela camada de abstração. Essa camada pode ser uma interface, várias ou mesmo uma classe que realiza delegações.

Uma vez que é aplicada essa técnica de desacoplamento, podemos gradativamente a re-implementação. Podemos utilizar um módulo legado para o que é de fato utilizava o módulo antigo.

modulo

Com o tempo, o módulo antigo fica em desuso e pode ser suprimido completamente.

#################################################

Como sincronizr branches?

- Merge
- Rebase

#################################################

Para saber mais: Fontes externas

Seguem alguns links externos das estratégias mencionadas:

https://trunkbaseddevelopment.com/
https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow
https://guides.github.com/introduction/flow/
https://docs.gitlab.com/ee/topics/gitlab_flow.html
https://danielkummer.github.io/git-flow-cheatsheet/index.pt_BR.html

#################################################

O que aprendemos?

- O Git possui branches leves, que causou a criação de workflows baseado em branches
- Existem vários flows ou modelos de ramificação (branching model)
- Alguns dos modelos conhecidos são:
	- Trunk-Based
	- Feature Branch Flow
	- GitHub Flow
	- GitLab Flow
	- Git Flow
- Cada um define a semântica e uso da branch
- lembre-se, cada branch deve ser de vida curta para diminuir o risco do merge hell
- O comando rebase garante um histórico linear dos commits
- Rebase não deve ser usado em branches compartilhadas/públicas

#################################################

Testes automatizados

- testes fazem parte da construção
- rodar testes antes do commit
- TDD pode ajudar
- desempenho importa

- Test Driven Development
- Funcional tests
- Integration tests
- Unit tests
- Smoke tests

- categorizar testes
- rodar testes rápidos primeiro
- usar smoke tests
- testes fazem parte do build
- aplicar boas práticas de testes
- feedback

#################################################

Etapas do build
- clean
- compile
- unit tests
- static analysis
- package software
- integrate database

Builds automatizados

- build a cada commit (continuous)
- tudo automatizado / single command
- build sem depender da IDE
- tudo está no repositório

Build rápido / feedback rápido

- otimize o build, métricas ajudam
	- verifique a fase de testes e análise do código
	- verifique ordem dessas fases
	- verifique a infra do build system
	- use cache
	- use staged build / pipeline (light build, heavy build)
	- regra: ten-minute build (xp programming)
	
Resumindo:

- use ferramentas para automatizar seu build
- use commit-build
- build deve ser independente da IDE
- tudo que precisa esta no repositório (install scripts, env settings, buils scripts, config files, database files, code)
- estrutura de diretórios bem definidos e conhecidos
- builds rápidos que falham rápido (10 min)
- script único que controi para ambientes (parametrizado)
	- comand único de build (botão de build)
- use build machine (CI daemon)

#################################################

As ferramentas de automação e construção variam muito pois são especificas da linguagem e plataforma mas também variam na área de uso como desenvolvimento web, mobile ou data science. Além disso, existem ferramentas especificas para uma etapa de build como teste ou deploy. Enfim, a lista abaixo representa apenas alguns exemplos.

Ferramentas de automação e construção, separado por linguagem/plataforma:

- Java: Ant, Maven, Gradle
- Front-end: Gulp, Grunt, Webpack
- .NET: MSBuild
- Ruby: Rake
- Kotlin: Gradle
- Clojure: Leiningen
- C/C++: CMake/Make
- PHP: Composer

E alguns frameworks famosos da área de teste:

- Selenium (automação do navegador)
- Cucumber (testes de aceitação)
- Postman e SoapUI (testes de API)
- JMeter (stress tests)
- JUnit, xUnit, PHPUnit (automação de testes)
- entre muitos outros frameworks e bibliotecas

Para o configuration management e provisioning podemos mencionar:

- Ansible
- Puppet
- Chef
- Salt
- Terraform (cloud)

O configuration management / provisioning é sobre a instalação e manutenção da maquina.

#################################################

O que aprendemos?

- Para usar integração contínua com sucesso, é preciso ter testes automatizados
	- Esses testes devem verificar a maior parte do código
	- TDD é uma metodologia que pode ajudar na criação dos testes
	- Os testes representam feedback sobre a saúde/qualidade do seu projeto

- O desenvolvedor deve rodar os testes antes de enviar as alterações para o repositório
	- Se for impossível executar todos os testes (por causa da infraestrutura ou demora da execução), é possível executar apenas os testes de unidade ou uma suíte de testes mais importantes (smoke testes)

- O build do projeto deve ser simples e totalmente automatizado
	- É boa prática o uso de uma ferramenta especializada para o build do software
	- Tente usar um "single command build" para executar o build

- A execução dos testes e build não deve se tornar uma razão para atrasar o build, para evitar:
	- Otimize build
	- Tente respeitar o tempo de 10 minutos para o build (alguns falam de 5 minutos)
	- Se o build for falhar, a ideia é que ele falhe o mais rápido possível

#################################################

Servidor de integração contínua

Em algum momento precisamos encontrar um local que realmente será capaz de testar todo o projeto, e este é o CI Daemon ou server de integração. Esse servidor irá garantir que a cada modificação seja realizado um novo teste, então o repositório é sempre checado e builds contínuos são uma realidade.

A prática de integração contínua não especifica que o CI Daemon é necessário, mas hoje em dia podemos considerar como uma obrigação nos projetos. Contudo, só porque utilizamos um server desas natureza estamos praticando integração contínua, uma ação é realizada por pessoas.

O CI Daemon realiza builds contínuos e notifica os desenvolvedores se alguma alteração se deu corretamente ou não. Normalmente esses softwares já possui um test board que oferecem os dados do build, então as informações e relatórios são de fácil acesso.

Existem alguns serviços no mercado que podem ser instalados localmente, o Jenkins é um exemplo. Existem também serviços na nuvem já associados. É importante que apenas que o servidor realize buidls a cada commit e notifique os desenvolvedores de maneira clara e funcional.

Alguns servidores oferecem o private build, que possibilita o desenvolvedor a fazer uma observação do repositório e testa-lo antes da produção, com um build mais completo.

#################################################

Para saber mais: Servidores do mercado

Listamos abaixo alguns servidores de integração disponíveis no mercado. Isso não é uma lista ordenada por popularidade e algum outro critério.

Alguns servidores são opensource, outros não, alguns são pagos ou podem ser alocados na nuvem e outros só existem para nuvem ou instalação local.

Em geral, não existe uma bala de prata e a melhor ferramenta é aquela que te serve bem:

Jenkins (https://jenkins.io/)
GoCD (https://www.gocd.org/)
Bamboo (https://www.atlassian.com/br/software/bamboo)
Travis CI (https://travis-ci.org/)
Team City (https://www.jetbrains.com/teamcity/)
Circle CI (https://circleci.com/)
Gitlab (https://about.gitlab.com/product/continuous-integration/)
AWS Code Pipeline https://aws.amazon.com/codepipeline/
Azure (https://azure.microsoft.com/pt-br/services/devops/server/)
entre outras possibilidades!

#################################################

Build quebrado

É tarefa de toda uma equipe resolver um problema no build o mais rápido possível, afinal não poderá ser realizados novos commits até que o build esteja estável e confiável novamente.

"Nobody has a higher priority task than fixing the build." -Kent Beeck

Caso o build não possa ser corrigido em um intervalo de tempo curto, o commit que gerou o problema deve ser desfeito para o que o projeto continue, e este é um ponto fundamental.

#################################################

O que aprendemos?

- O servidor de integração contínua monitora o repositório de código
	- Ao detectar uma alteração, deve iniciar o build do projeto
	- O build deve acontecer a cada novo commit
	- O resultado do build deve ser publicado
	- Os desenvolvedores devem ser notificados sobre o status do build

- Um build quebrado deve ser arrumado em no máximo 10 minutos, com prioridade máxima
	- É responsabilidade de todos da equipe arrumar um build quebrado

#################################################

Certificação de CI

1. Você "comita" diariamente o seu código no "mainline" do projeto?

Sabemos que integração contínua exige esse fazer, pois devemos construir o projeto de maneira fragmentada e com feedback rápido.

2. Build e testes rodam automatizados e trazem confiança que o software está correto?

Alguns projetos possuem os testes automatizados, mas não realizam a quantidade suficiente para garantir a confiabilidade do sofware. O build pode falhar, mas a princípio os testes trazem a confiança para realizar os commits.

3. Quando um build quebra, a equipe o conserta rapidamente? Tempo ideial de 10 minutos.

Quando um bug é detectado a equipe deve se movimentar e fazer a resolução desse problema sua maior prioridade.

#################################################

O que é entrega contínua?

Observemos o famoso manifesto ágil:

"Working software over comprehensive documentation"

Um softawere funcional é mais importante do que uma documentação enorme. Mas o que significa um software funcional?

Novamente observaremos outra citação do manifesto ágil:

"Our highest priority is to satisfy the customer through early and continuous delivery of valuable software."

A prioridade mais alta é deixar o cliente satisfeito, e isso é feito por meio de entrega contínua. Isto é, um software funcional é aquele usado pelo cliente com suas novas features de maneira confiável. A integração contínua é uma parte fundamental para se chegar à entrega contínua.

Ao revisitarmos a metáfora do botão de integração em que tudo é simples e automatizado, devemos ter um outro botão de "release", isto é, de deploy.

Qual alteração que chega em nosso trunk principal e pode entrar em produção? Obviamente existem decisões de negócio sobre lançar novas features, como esperar datas comerciais importantes. Mas na visão técnica, devemos saber quais são as modificações aplicáveis.

A entrega contínua é um assunto para um próximo curso, mas sobrevoaremos alguns conceitos e suas principais características.

Dentro da arquitetura da aplicação, é anexado um novo requisito funcional: "deployability". Esta característica deveria ser pensada desde o início, pois devemos entregar com frequência o software funcional.

Um deployment pipeline é um fluxo em que o artefato passa e cada etapa incrementa e agrega mais segurança ao se aproximar do ambiente de produção.

Deploys de baixo risco são aqueles experimentais, contínuos, atualizações pontuais acompanhadas. Devemos separar a ideia de "deploy" e "publicação".Otimizar para resiliência é prevenir erros. No contexto de integração e entrega contínua temos o deploy contínuo.

As equipes de desenvolvimento normalmente possuem divisões, como as pessoas do QA,deploy e operações. As tarefas são delegadas para os subgrupos durante o projeto. Equipes separadas que mal se comunicam dificultam o andamento do trabalho, aumentam a possibilidade de problemas e atrasam os deploys.

A entrega contínua também exige uma mudança no comportamento e na cultura da empresa: as pessoas precisam trabalhar integradas.


- RNF: deployability
- Padrões:
	- deployment pipeline
	- deploys de baixo risco
		- deploy incremental
		- separar deploy e publicação
		- deploys frequentes
		- otimizar para resiliência

#################################################

Sobre DevOps

DevOps é um movimento cultural que fisa a integrar e otimizar o processo de aprendizagem entre os integrantes da equipe. DevOps não é um título de cargo, mas uma visão de organização de trabalho que visa criar um pipeline veloz, seguro e integrado.

Precisamos, claro, de ferramentas que irão facilitar as integrações e monitoramento, mas é muito mais um movimento culturao do que uma aparelhagem técnica.

#################################################

O que aprendemos?

- A integração contínua é uma prática que faz parte da entrega contínua (continuous delivery - CD)
- A entrega contínua define uma série de práticas e padrões para construir e deployar a aplicação continuamente
	- Não deve existir nenhum motivo técnico para impedir o deploy (apenas um motivo de negócio)
	- Qualquer alteração no trunk principal é releasable (pode entrar em produção)

- A entrega contínua é uma evolução da integração contínua e envolve todo o ciclo do projeto, incluindo equipes de QA, deploy e operações
	- a diferença entre a entrega contínua e o deploy contínuo é, que no deploy contínuo todas as alterações realmente entra em produção, o tempo todo

- DevOps é um movimento cultural, que visa a colaboração entre as equipes envolvidas no desenvolvimento e entrega de software, para melhorar a qualidade e velocidade do software
- DevOps é sobre colaboração, melhoria e aprendizagem contínua

#################################################